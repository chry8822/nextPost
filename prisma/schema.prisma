generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  name        String?
  avatar      String?
  bio         String?
  website     String?
  github      String?
  linkedin    String?
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  
  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  slug        String   @unique
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
  tags        PostTag[]
  
  @@map("posts")
}

// Tag: 태그 테이블  
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique                  // 태그 이름 ("React", "JavaScript" 등)
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now())
  
  // 관계
  posts     PostTag[]                         // PostTag와 1:N 관계
  
  @@map("tags")
}

// PostTag: 중간 연결 테이블 (다대다 관계를 위한)
model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
   
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)  // Post와 N:1
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)   // Tag와 N:1
  
  @@unique([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 관계
  postId    String
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Like {
  id       String @id @default(cuid())
  postId   String
  authorId String
  
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@unique([postId, authorId])
  @@map("likes")
}